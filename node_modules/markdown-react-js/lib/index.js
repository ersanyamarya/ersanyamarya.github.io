'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mdReact = mdReactFactory;
exports.default = void 0;

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _assign = _interopRequireDefault(require("lodash/assign"));

var _reduce = _interopRequireDefault(require("lodash/reduce"));

var _zipObject = _interopRequireDefault(require("lodash/zipObject"));

var _fromPairs = _interopRequireDefault(require("lodash/fromPairs"));

var _compact = _interopRequireDefault(require("lodash/compact"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _isString = _interopRequireDefault(require("lodash/isString"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var DEFAULT_TAGS = {
  'html': 'span'
};
var DEFAULT_RULES = {
  image: function image(token, attrs, children) {
    if (children.length) {
      attrs = (0, _assign.default)({}, attrs, {
        alt: children[0]
      });
    }

    return [[token.tag, attrs]];
  },
  codeInline: function codeInline(token, attrs) {
    return [(0, _compact.default)([token.tag, attrs, token.content])];
  },
  codeBlock: function codeBlock(token, attrs) {
    return [['pre', (0, _compact.default)([token.tag, attrs, token.content])]];
  },
  fence: function fence(token, attrs) {
    if (token.info) {
      var langName = token.info.trim().split(/\s+/g)[0];
      attrs = (0, _assign.default)({}, attrs, {
        'data-language': langName
      });
    }

    return [['pre', (0, _compact.default)([token.tag, attrs, token.content])]];
  },
  hardbreak: function hardbreak() {
    return [['br']];
  },
  softbreak: function softbreak(token, attrs, children, options) {
    return options.breaks ? [['br']] : '\n';
  },
  text: function text(token) {
    return token.content;
  },
  htmlBlock: function htmlBlock(token) {
    return token.content;
  },
  htmlInline: function htmlInline(token) {
    return token.content;
  },
  inline: function inline(token, attrs, children) {
    return children;
  },
  default: function _default(token, attrs, children, options, getNext) {
    if (token.nesting === 1 && token.hidden) {
      return getNext();
    }
    /* plugin-related */


    if (!token.tag) {
      return token.content;
    }

    if (token.info) {
      attrs = (0, _assign.default)({}, attrs, {
        'data-info': token.info.trim()
      });
    }
    /* plugin-related */


    return [(0, _compact.default)([token.tag, attrs].concat(token.nesting === 1 && getNext()))];
  }
};

function convertTree(tokens, convertRules, options) {
  function convertBranch(tkns, nested) {
    var branch = [];

    if (!nested) {
      branch.push('html');
    }

    function getNext() {
      return convertBranch(tkns, true);
    }

    var token = tkns.shift();

    while (token && token.nesting !== -1) {
      var attrs = token.attrs && (0, _fromPairs.default)(token.attrs);
      var children = token.children && convertBranch(token.children.slice(), true);
      var rule = convertRules[(0, _camelCase.default)(token.type)] || convertRules.default;
      branch = branch.concat(rule(token, attrs, children, options, getNext));
      token = tkns.shift();
    }

    return branch;
  }

  return convertBranch(tokens, false);
}

function mdReactFactory() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var onIterate = options.onIterate,
      _options$tags = options.tags,
      tags = _options$tags === void 0 ? DEFAULT_TAGS : _options$tags,
      presetName = options.presetName,
      markdownOptions = options.markdownOptions,
      _options$enableRules = options.enableRules,
      enableRules = _options$enableRules === void 0 ? [] : _options$enableRules,
      _options$disableRules = options.disableRules,
      disableRules = _options$disableRules === void 0 ? [] : _options$disableRules,
      _options$plugins = options.plugins,
      plugins = _options$plugins === void 0 ? [] : _options$plugins,
      _options$onGenerateKe = options.onGenerateKey,
      onGenerateKey = _options$onGenerateKe === void 0 ? function (tag, index) {
    return "mdrct-".concat(tag, "-").concat(index);
  } : _options$onGenerateKe,
      className = options.className;
  var md = (0, _markdownIt.default)(presetName || 'default', markdownOptions).enable(enableRules).disable(disableRules);
  var convertRules = (0, _assign.default)({}, DEFAULT_RULES, options.convertRules);
  md = (0, _reduce.default)(plugins, function (m, plugin) {
    return plugin.plugin ? m.use.apply(m, [plugin.plugin].concat(_toConsumableArray(plugin.args))) : m.use(plugin);
  }, md);
  var defaultProps;

  function iterateTree(tree) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var tag = tree.shift();
    var key = onGenerateKey(tag, index);

    var props = _objectSpread({}, defaultProps, {
      key: key
    });

    if (tree.length && (0, _isPlainObject.default)(tree[0])) {
      (0, _assign.default)(props, tree.shift());
    }

    if (level === 0 && className) {
      props.className = className;
    }

    var children = tree.map(function (branch, idx) {
      return Array.isArray(branch) ? iterateTree(branch, level + 1, idx) : branch;
    }); // Don't pass empty children array to void elements like img,
    // otherwise react will warn you.

    if (!children.length) {
      children = undefined;
    }

    tag = tags[tag] || tag;

    if ((0, _isString.default)(props.style)) {
      props.style = (0, _zipObject.default)(props.style.split(';').map(function (prop) {
        return prop.split(':');
      }).map(function (keyVal) {
        return [(0, _camelCase.default)(keyVal[0].trim()), keyVal[1].trim()];
      }));
    }

    return typeof onIterate === 'function' ? onIterate(tag, props, children, level) : _react.default.createElement(tag, props, children);
  }

  return function (text, props) {
    defaultProps = props;
    var tree = convertTree(md.parse(text, {}), convertRules, md.options);
    return iterateTree(tree);
  };
}

var MDReactComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(MDReactComponent, _Component);

  function MDReactComponent() {
    _classCallCheck(this, MDReactComponent);

    return _possibleConstructorReturn(this, _getPrototypeOf(MDReactComponent).apply(this, arguments));
  }

  _createClass(MDReactComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          props = _objectWithoutProperties(_this$props, ["text"]);

      return mdReactFactory(props)(text);
    }
  }]);

  return MDReactComponent;
}(_react.Component);

_defineProperty(MDReactComponent, "propTypes", {
  text: _propTypes.default.string.isRequired,
  onIterate: _propTypes.default.func,
  onGenerateKey: _propTypes.default.func,
  tags: _propTypes.default.object,
  presetName: _propTypes.default.string,
  markdownOptions: _propTypes.default.object,
  enableRules: _propTypes.default.array,
  disableRules: _propTypes.default.array,
  convertRules: _propTypes.default.object,
  plugins: _propTypes.default.array,
  className: _propTypes.default.string
});

var _default2 = MDReactComponent;
exports.default = _default2;